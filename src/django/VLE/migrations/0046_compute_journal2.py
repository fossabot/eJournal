# Generated by Django 2.2.8 on 2020-04-19 12:38

import django.contrib.postgres.fields
from django.conf import settings
from django.db import migrations, models
from django.db.models import Sum


def update_journal_with_computed_vars(apps, schema_editor):
    Journal = apps.get_model('VLE', 'Journal')

    def grade(j):
        return round(j.bonus_points + (
            j.node_set.filter(entry__grade__published=True)
            .values('entry__grade__grade')
            .aggregate(Sum('entry__grade__grade'))['entry__grade__grade__sum'] or 0), 2)

    def unpublished(j):
        return j.node_set.filter(entry__grade__published=False).count()

    def needs_marking(j):
        return j.node_set.filter(entry__isnull=False, entry__grade__isnull=True).count()

    def needs_lti_link(j):
        if not j.assignment.active_lti_id:
            return list()
        return list(j.authors.filter(sourcedid__isnull=True).values_list('user__full_name', flat=True))

    def name(j):
        if j.stored_name:
            return j.stored_name
        return ', '.join(j.authors.values_list('user__full_name', flat=True))

    def image(j):
        if j.stored_image:
            return j.stored_image

        user_with_pic = j.authors.all().exclude(user__profile_picture=settings.DEFAULT_PROFILE_PICTURE).first()
        if user_with_pic is not None:
            return user_with_pic.user.profile_picture

        return settings.DEFAULT_PROFILE_PICTURE

    def full_names(j):
        return ', '.join(j.authors.values_list('user__full_name', flat=True))

    def usernames(j):
        return ', '.join(j.authors.values_list('user__username', flat=True))

    # Compute all computed values of each journal
    for j in Journal.all_objects.all():
        j.grade = grade(j)
        j.unpublished = unpublished(j)
        j.needs_marking = needs_marking(j)
        j.needs_lti_link = needs_lti_link(j)
        j.name = name(j)
        j.image = image(j)
        j.full_names = full_names(j)
        j.usernames = usernames(j)
        j.save()


class Migration(migrations.Migration):

    dependencies = [
        ('VLE', '0045_compute_journal'),
        ('computedfields', '0002_contributingmodelsmodel'),
    ]

    operations = [
        migrations.RunPython(update_journal_with_computed_vars, lambda apps, schema_editor: None),
    ]
